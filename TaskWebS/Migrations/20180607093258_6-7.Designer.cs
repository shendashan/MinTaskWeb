// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;
using TaskWebS.EFCore;

namespace TaskWebS.Migrations
{
    [DbContext(typeof(EntityFrameworkDbContext))]
    [Migration("20180607093258_6-7")]
    partial class _67
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.3-rtm-10026")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TaskWebS.Mode.TaskAndUser", b =>
                {
                    b.Property<long>("UserAndTaskId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateTime");

                    b.Property<long>("CreateUserId");

                    b.Property<DateTime>("DeleteTime");

                    b.Property<long>("DeleteUserId");

                    b.Property<bool>("IsDelete");

                    b.Property<long>("TaskId");

                    b.Property<DateTime>("UpdateTime");

                    b.Property<long>("UpdateUserId");

                    b.Property<long>("UserId");

                    b.HasKey("UserAndTaskId");

                    b.HasIndex("TaskId");

                    b.HasIndex("UserId");

                    b.ToTable("TaskAndUsers");
                });

            modelBuilder.Entity("TaskWebS.Mode.TaskError", b =>
                {
                    b.Property<long>("TaskErrorId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateTime");

                    b.Property<long>("CreateUserId");

                    b.Property<DateTime>("DeleteTime");

                    b.Property<long>("DeleteUserId");

                    b.Property<bool>("IsDelete");

                    b.Property<DateTime>("TaskErrorCurrentTime");

                    b.Property<string>("TaskErrorMessage")
                        .HasMaxLength(500);

                    b.Property<string>("TaskErrorName")
                        .HasMaxLength(50);

                    b.Property<string>("TaskErrorTag")
                        .HasMaxLength(30);

                    b.Property<DateTime>("UpdateTime");

                    b.Property<long>("UpdateUserId");

                    b.HasKey("TaskErrorId");

                    b.ToTable("TaskErrors");
                });

            modelBuilder.Entity("TaskWebS.Mode.TaskMessage", b =>
                {
                    b.Property<long>("TaskMessageId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateTime");

                    b.Property<long>("CreateUserId");

                    b.Property<DateTime>("DeleteTime");

                    b.Property<long>("DeleteUserId");

                    b.Property<bool>("IsDelete");

                    b.Property<string>("MessageContent")
                        .HasMaxLength(250);

                    b.Property<long>("TaskId");

                    b.Property<DateTime>("UpdateTime");

                    b.Property<long>("UpdateUserId");

                    b.Property<long>("UserId");

                    b.HasKey("TaskMessageId");

                    b.HasIndex("TaskId");

                    b.HasIndex("UserId");

                    b.ToTable("TaskMessages");
                });

            modelBuilder.Entity("TaskWebS.Mode.TaskTable", b =>
                {
                    b.Property<long>("TaskId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateTime");

                    b.Property<long>("CreateUserId");

                    b.Property<DateTime>("DeleteTime");

                    b.Property<long>("DeleteUserId");

                    b.Property<bool>("IsDelete");

                    b.Property<long>("TagId");

                    b.Property<string>("TaskName")
                        .HasMaxLength(36);

                    b.Property<string>("TaskRemark")
                        .HasMaxLength(250);

                    b.Property<DateTime>("UpdateTime");

                    b.Property<long>("UpdateUserId");

                    b.HasKey("TaskId");

                    b.HasIndex("TagId");

                    b.ToTable("TaskTables");
                });

            modelBuilder.Entity("TaskWebS.Mode.TaskTag", b =>
                {
                    b.Property<long>("TaskTagId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateTime");

                    b.Property<long>("CreateUserId");

                    b.Property<DateTime>("DeleteTime");

                    b.Property<long>("DeleteUserId");

                    b.Property<bool>("IsDelete");

                    b.Property<string>("TaskTagName")
                        .HasMaxLength(12);

                    b.Property<string>("TaskTagRemark")
                        .HasMaxLength(120);

                    b.Property<DateTime>("UpdateTime");

                    b.Property<long>("UpdateUserId");

                    b.HasKey("TaskTagId");

                    b.ToTable("TaskTags");
                });

            modelBuilder.Entity("TaskWebS.Mode.TaskUser", b =>
                {
                    b.Property<long>("UserId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateTime");

                    b.Property<long>("CreateUserId");

                    b.Property<DateTime>("DeleteTime");

                    b.Property<long>("DeleteUserId");

                    b.Property<bool>("IsDelete");

                    b.Property<DateTime>("UpdateTime");

                    b.Property<long>("UpdateUserId");

                    b.Property<string>("UserLoginName")
                        .HasMaxLength(16);

                    b.Property<string>("UserName")
                        .HasMaxLength(16);

                    b.Property<string>("UserPhone")
                        .HasMaxLength(36);

                    b.Property<string>("UserPwd")
                        .HasMaxLength(36);

                    b.HasKey("UserId");

                    b.ToTable("TaskUsers");
                });

            modelBuilder.Entity("TaskWebS.Mode.TaskAndUser", b =>
                {
                    b.HasOne("TaskWebS.Mode.TaskTable", "TaskTable")
                        .WithMany()
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TaskWebS.Mode.TaskUser", "TaskUser")
                        .WithMany("TaskAndUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TaskWebS.Mode.TaskMessage", b =>
                {
                    b.HasOne("TaskWebS.Mode.TaskTable", "TaskTable")
                        .WithMany()
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TaskWebS.Mode.TaskUser", "TaskUser")
                        .WithMany("TaskMessages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TaskWebS.Mode.TaskTable", b =>
                {
                    b.HasOne("TaskWebS.Mode.TaskTag", "TaskTag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
